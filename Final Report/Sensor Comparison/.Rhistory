deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = "E0 - Eeff", xlab = expression('ln' delta))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = "E0 - Eeff", xlab = paste('ln ', expression(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = "E0 - Eeff", xlab = expression(delta))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = "E0 - Eeff", xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'\circ - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'circ - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'0 - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'0 - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(mfrow = c(1,1))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.5, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 1, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 1.0, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = "Rmax/Rmin - 1", xlab = expression(ln(delta)))
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = "Rmax/Rmin - 1", xlab = expression(delta))
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(fraction(Rmax,Rmin)-1), xlab = expression(delta))
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(frac(Rmax,Rmin)-1), xlab = expression(delta))
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 1.5, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(frac(Rmax,Rmin)-1), xlab = expression(delta))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 1.2, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(frac(Rmax,Rmin)-1), xlab = expression(delta))
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 1.1, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(frac(Rmax,Rmin)-1), xlab = expression(delta))
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 1.0, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(frac(Rmax,Rmin)-1), xlab = expression(delta))
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 1.1, 0.4, 0.8))
plot(gfp1_max_prop$Eeff - gfp1_max_prop$e0 ~ log(gfp1_max_prop$delta), ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression('E'^'0' - 'E'['eff']), xlab = expression(ln(delta)))
points(gfp1_iso_prop$Eeff - gfp1_iso_prop$e0 ~ log(gfp1_iso_prop$delta), col = colors4[1],pch = 16, cex = 2)
points(gfp2_max_prop$Eeff - gfp2_max_prop$e0 ~ log(gfp2_max_prop$delta), col= colors4[3],pch = 16, cex = 2)
points(gfp2_iso_prop$Eeff - gfp2_iso_prop$e0 ~ log(gfp2_iso_prop$delta), col = colors4[4],pch = 16, cex = 2)
deltas <- seq(exp(-2), exp(2))
lines(lowess(Eeff(deltas, 300) - 300 ~ log(deltas)), col = "black")
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso", 'RT/2F'), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4], 'black'), cex = 1)
plot((gfp1_max_prop$Rmax/gfp1_max_prop$Rmin)-1 ~ gfp1_max_prop$delta, ylim = c(-30, 30), xlim = c(-2, 2), col = colors4[2],pch = 16, cex = 2, ylab = expression(frac(Rmax,Rmin)-1), xlab = expression(delta))
points((gfp1_iso_prop$Rmax/gfp1_iso_prop$Rmin)-1 ~ gfp1_iso_prop$delta, col = colors4[1],pch = 16, cex = 2)
points((gfp2_max_prop$Rmax/gfp2_max_prop$Rmin)-1 ~ gfp2_max_prop$delta, col= colors4[3],pch = 16, cex = 2)
points((gfp2_iso_prop$Rmax/gfp2_iso_prop$Rmin)-1 ~ gfp2_iso_prop$delta, col = colors4[4],pch = 16, cex = 2)
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso"), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4]), cex = 1)
gfp2_max_prop$delta
(gfp2_max_prop$Rmax/gfp2_max_prop$Rmin)-1
# Write a function that, given a sensor and two sets of lambda bands, returns a list of properties
# Sensor data format:
initSensor <- function(sensor_data, lambda_1, lambda_2, e0) {
# Clean data
ox_lambda <- na.omit(sensor_data[[1]])
ox_value <- na.omit(sensor_data[[2]])
red_lambda <- na.omit(sensor_data[[3]])
red_value <- na.omit(sensor_data[[4]])
# Set delta
delta <- mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
# Set Rmin and Rmax
Rmin <- mean(red_value[red_lambda >= lambda_1[1] & red_lambda <= lambda_1[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
Rmax <- mean(ox_value[ox_lambda >= lambda_1[1] & ox_lambda <= lambda_1[2]]) /
mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]])
# Generate some R, OxD, and E values
R <- seq(Rmin, Rmax, by = 0.001)
OxD_values <- OXD(R, Rmin, Rmax, delta)
E_values <- E(e0, R, Rmin, Rmax, delta)
# Generate R' and R''
RPrime <- R/Rmin
RDoublePrime <- (R-Rmin)/(Rmax-Rmin)
# Generate partial derivatives
OxD_sen <- D_OXD(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta)
E_sen <- D_E(R = R, Rmin = Rmin, Rmax = Rmax)
# Return the final list
return(list(data = combine(ox_lambda, ox_value, red_lambda, red_value), e0 = e0, Eeff = Eeff(delta_470 = delta, e0 = e0),
delta = delta, Rmin = Rmin, Rmax = Rmax, R = R, OxD = OxD_values, E = E_values,
RPrime = RPrime, RDoublePrime = RDoublePrime))
}
# Import GFP1/2 data
gfp1_dat <- read.csv("rogfp1.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
gfp2_dat <- read.csv("rogfp2.csv", header = FALSE, stringsAsFactors=FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_prop <- initSensor(gfp1_dat, c(390, 410), c(470, 480), gfp1_e0)
gfp2_prop <- initSensor(gfp2_dat, c(390, 410), c(490, 500), gfp2_e0)
# Import GFP1/2 data
gfp1_dat <- read.csv("rogfp1.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
gfp2_dat <- read.csv("rogfp2.csv", header = FALSE, stringsAsFactors=FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_prop <- initSensor(gfp1_dat, c(390, 410), c(470, 480), gfp1_e0)
gfp2_prop <- initSensor(gfp2_dat, c(390, 410), c(490, 500), gfp2_e0)
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_iso_prop <- initSensor(gfp1_dat, c(375, 385), c(430, 440), gfp1_e0)
gfp1_max_prop <- initSensor(gfp1_dat, c(375, 385), c(455, 465), gfp1_e0)
gfp2_iso_prop <- initSensor(gfp2_dat, c(355, 365), c(420, 430), gfp2_e0)
gfp2_max_prop <- initSensor(gfp2_dat, c(355, 365), c(445, 455), gfp2_e0)
# Print some properties
values <- (data.frame(
c("Delta", "Rmin", "Rmax", "E0", "Adjusted E0",
"Dynamic Range", "Fold Change"),
c(round(gfp1_iso_prop$delta, 1),
round(gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_iso_prop$delta, gfp1_e0), 1),
round(gfp1_iso_prop$Rmax - gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax/gfp1_iso_prop$Rmin, 1)),
c(round(gfp1_max_prop$delta, 1),
round(gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_max_prop$delta, gfp1_e0), 1),
round(gfp1_max_prop$Rmax - gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax/gfp1_max_prop$Rmin, 1)),
c(round(gfp2_iso_prop$delta, 1),
round(gfp2_iso_prop$Rmin, 2),
round(gfp2_iso_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_iso_prop$delta, gfp2_e0), 1),
round(gfp2_iso_prop$Rmax - gfp2_iso_prop$Rmin, 1),
round(gfp2_iso_prop$Rmax/gfp2_iso_prop$Rmin, 1)),
c(round(gfp2_max_prop$delta, 1),
round(gfp2_max_prop$Rmin, 2),
round(gfp2_max_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_max_prop$delta, gfp2_e0), 1),
round(gfp2_max_prop$Rmax - gfp2_max_prop$Rmin, 1),
round(gfp2_max_prop$Rmax/gfp2_max_prop$Rmin, 1))
))
colnames(values) <- c("Characteristic", "GFP1 Isobestic", "GFP1 Max", "GFP2 Isobestic", "GFP2 Max")
knitr::kable(values, caption = "Table 2: Characteristics of GFP1 and GFP2 sensors")
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_iso_prop <- initSensor(gfp1_dat, c(375, 385), c(430, 440), gfp1_e0)
gfp1_max_prop <- initSensor(gfp1_dat, c(375, 385), c(455, 465), gfp1_e0)
gfp2_iso_prop <- initSensor(gfp2_dat, c(355, 365), c(420, 430), gfp2_e0)
gfp2_max_prop <- initSensor(gfp2_dat, c(355, 365), c(445, 455), gfp2_e0)
# Print some properties
values <- (data.frame(
c("Delta", "Rmin", "Rmax", "E0", "Adjusted E0",
"Dynamic Range", "Fold Change"),
c(round(gfp1_iso_prop$delta, 1),
round(gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_iso_prop$delta, gfp1_e0), 1),
round(gfp1_iso_prop$Rmax - gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax/gfp1_iso_prop$Rmin, 1)),
c(round(gfp1_max_prop$delta, 1),
round(gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_max_prop$delta, gfp1_e0), 1),
round(gfp1_max_prop$Rmax - gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax/gfp1_max_prop$Rmin, 1)),
c(round(gfp2_iso_prop$delta, 1),
round(gfp2_iso_prop$Rmin, 2),
round(gfp2_iso_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_iso_prop$delta, gfp2_e0), 1),
round(gfp2_iso_prop$Rmax - gfp2_iso_prop$Rmin, 1),
round(gfp2_iso_prop$Rmax/gfp2_iso_prop$Rmin, 1)),
c(round(gfp2_max_prop$delta, 1),
round(gfp2_max_prop$Rmin, 2),
round(gfp2_max_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_max_prop$delta, gfp2_e0), 1),
round(gfp2_max_prop$Rmax - gfp2_max_prop$Rmin, 1),
round(gfp2_max_prop$Rmax/gfp2_max_prop$Rmin, 1))
))
colnames(values) <- c("Characteristic", "GFP1 Isobestic", "GFP1 Max", "GFP2 Isobestic", "GFP2 Max")
knitr::kable(values, caption = "Table 2: Characteristics of GFP1 and GFP2 sensors")
# Write a function that, given a sensor and two sets of lambda bands, returns a list of properties
# Sensor data format:
initSensor <- function(sensor_data, lambda_1, lambda_2, e0) {
# Clean data
ox_lambda <- na.omit(sensor_data[[1]])
ox_value <- na.omit(sensor_data[[2]])
red_lambda <- na.omit(sensor_data[[3]])
red_value <- na.omit(sensor_data[[4]])
# Set delta
delta <- mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
# Set Rmin and Rmax
Rmin <- mean(red_value[red_lambda >= lambda_1[1] & red_lambda <= lambda_1[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
Rmax <- mean(ox_value[ox_lambda >= lambda_1[1] & ox_lambda <= lambda_1[2]]) /
mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]])
# Generate some R, OxD, and E values
R <- seq(Rmin, Rmax, by = 0.001)
OxD_values <- OXD(R, Rmin, Rmax, delta)
E_values <- E(e0, R, Rmin, Rmax, delta)
# Generate R' and R''
RPrime <- R/Rmin
RDoublePrime <- (R-Rmin)/(Rmax-Rmin)
# Generate partial derivatives
OxD_sen <- D_OXD(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta)
E_sen <- D_E(R = R, Rmin = Rmin, Rmax = Rmax)
# Return the final list
return(list(data = combine(ox_lambda, ox_value, red_lambda, red_value), e0 = e0, Eeff = Eeff(delta_470 = delta, e0 = e0),
OxD_sen = OxD_sen, E_sen = E_sen,
delta = delta, Rmin = Rmin, Rmax = Rmax, R = R, OxD = OxD_values, E = E_values,
RPrime = RPrime, RDoublePrime = RDoublePrime))
}
# Import GFP1/2 data
gfp1_dat <- read.csv("rogfp1.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
gfp2_dat <- read.csv("rogfp2.csv", header = FALSE, stringsAsFactors=FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_prop <- initSensor(gfp1_dat, c(390, 410), c(470, 480), gfp1_e0)
gfp2_prop <- initSensor(gfp2_dat, c(390, 410), c(490, 500), gfp2_e0)
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_iso_prop <- initSensor(gfp1_dat, c(375, 385), c(430, 440), gfp1_e0)
gfp1_max_prop <- initSensor(gfp1_dat, c(375, 385), c(455, 465), gfp1_e0)
gfp2_iso_prop <- initSensor(gfp2_dat, c(355, 365), c(420, 430), gfp2_e0)
gfp2_max_prop <- initSensor(gfp2_dat, c(355, 365), c(445, 455), gfp2_e0)
# Print some properties
values <- (data.frame(
c("Delta", "Rmin", "Rmax", "E0", "Adjusted E0",
"Dynamic Range", "Fold Change"),
c(round(gfp1_iso_prop$delta, 1),
round(gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_iso_prop$delta, gfp1_e0), 1),
round(gfp1_iso_prop$Rmax - gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax/gfp1_iso_prop$Rmin, 1)),
c(round(gfp1_max_prop$delta, 1),
round(gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_max_prop$delta, gfp1_e0), 1),
round(gfp1_max_prop$Rmax - gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax/gfp1_max_prop$Rmin, 1)),
c(round(gfp2_iso_prop$delta, 1),
round(gfp2_iso_prop$Rmin, 2),
round(gfp2_iso_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_iso_prop$delta, gfp2_e0), 1),
round(gfp2_iso_prop$Rmax - gfp2_iso_prop$Rmin, 1),
round(gfp2_iso_prop$Rmax/gfp2_iso_prop$Rmin, 1)),
c(round(gfp2_max_prop$delta, 1),
round(gfp2_max_prop$Rmin, 2),
round(gfp2_max_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_max_prop$delta, gfp2_e0), 1),
round(gfp2_max_prop$Rmax - gfp2_max_prop$Rmin, 1),
round(gfp2_max_prop$Rmax/gfp2_max_prop$Rmin, 1))
))
colnames(values) <- c("Characteristic", "GFP1 Isobestic", "GFP1 Max", "GFP2 Isobestic", "GFP2 Max")
knitr::kable(values, caption = "Table 2: Characteristics of GFP1 and GFP2 sensors")
# Define the fraction oxidized
OXD <- function(R, Rmin, Rmax, delta) {
return (
(R - Rmin)/((R - Rmin) + (delta*(Rmax - R)))
)
}
# Define the redox potential
E <- function(e0, R, Rmin, Rmax, delta) {
return(e0 - 12.71 * log((delta*Rmax - delta*R)/(R-Rmin)))
}
Eeff <- function(delta_470, e0) {
return (
e0 - 12.71 * log(delta_470)
)
}
# Define the derivative of OxD
D_OXD <- function(R, Rmin, Rmax, delta) {
return (
(delta * (Rmax - Rmin)) /
((R * (delta - 1) - (delta * Rmax) + Rmin)^2)
)
}
# Define the derivative of E
D_E <- function(R, Rmin, Rmax) {
return(
(-12.71*(Rmax-Rmin))/((R-Rmin)*(R-Rmax))
)
}
# Write a function that, given a sensor and two sets of lambda bands, returns a list of properties
# Sensor data format:
initSensor <- function(sensor_data, lambda_1, lambda_2, e0) {
# Clean data
ox_lambda <- na.omit(sensor_data[[1]])
ox_value <- na.omit(sensor_data[[2]])
red_lambda <- na.omit(sensor_data[[3]])
red_value <- na.omit(sensor_data[[4]])
# Set delta
delta <- mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
# Set Rmin and Rmax
Rmin <- mean(red_value[red_lambda >= lambda_1[1] & red_lambda <= lambda_1[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
Rmax <- mean(ox_value[ox_lambda >= lambda_1[1] & ox_lambda <= lambda_1[2]]) /
mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]])
# Generate some R, OxD, and E values
R <- seq(Rmin, Rmax, by = 0.001)
OxD_values <- OXD(R, Rmin, Rmax, delta)
E_values <- E(e0, R, Rmin, Rmax, delta)
# Generate R' and R''
RPrime <- R/Rmin
RDoublePrime <- (R-Rmin)/(Rmax-Rmin)
# Generate partial derivatives
OxD_sen <- D_OXD(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta)
E_sen <- D_E(R = R, Rmin = Rmin, Rmax = Rmax)
# Return the final list
return(list(data = combine(ox_lambda, ox_value, red_lambda, red_value), e0 = e0, Eeff = Eeff(delta_470 = delta, e0 = e0),
OxD_sen = OxD_sen, E_sen = E_sen,
delta = delta, Rmin = Rmin, Rmax = Rmax, R = R, OxD = OxD_values, E = E_values,
RPrime = RPrime, RDoublePrime = RDoublePrime))
}
# Set known midpoint potentials
gfp1_e0 <-  -288
gfp2_e0 <- -272
# Get other properties
gfp1_iso_prop <- initSensor(gfp1_dat, c(375, 385), c(430, 440), gfp1_e0)
gfp1_max_prop <- initSensor(gfp1_dat, c(375, 385), c(455, 465), gfp1_e0)
gfp2_iso_prop <- initSensor(gfp2_dat, c(355, 365), c(420, 430), gfp2_e0)
gfp2_max_prop <- initSensor(gfp2_dat, c(355, 365), c(445, 455), gfp2_e0)
# Print some properties
values <- (data.frame(
c("Delta", "Rmin", "Rmax", "E0", "Adjusted E0",
"Dynamic Range", "Fold Change"),
c(round(gfp1_iso_prop$delta, 1),
round(gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_iso_prop$delta, gfp1_e0), 1),
round(gfp1_iso_prop$Rmax - gfp1_iso_prop$Rmin, 1),
round(gfp1_iso_prop$Rmax/gfp1_iso_prop$Rmin, 1)),
c(round(gfp1_max_prop$delta, 1),
round(gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax, 1),
gfp1_e0,
round(Eeff(gfp1_max_prop$delta, gfp1_e0), 1),
round(gfp1_max_prop$Rmax - gfp1_max_prop$Rmin, 1),
round(gfp1_max_prop$Rmax/gfp1_max_prop$Rmin, 1)),
c(round(gfp2_iso_prop$delta, 1),
round(gfp2_iso_prop$Rmin, 2),
round(gfp2_iso_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_iso_prop$delta, gfp2_e0), 1),
round(gfp2_iso_prop$Rmax - gfp2_iso_prop$Rmin, 1),
round(gfp2_iso_prop$Rmax/gfp2_iso_prop$Rmin, 1)),
c(round(gfp2_max_prop$delta, 1),
round(gfp2_max_prop$Rmin, 2),
round(gfp2_max_prop$Rmax, 1),
gfp2_e0,
round(Eeff(gfp2_max_prop$delta, gfp2_e0), 1),
round(gfp2_max_prop$Rmax - gfp2_max_prop$Rmin, 1),
round(gfp2_max_prop$Rmax/gfp2_max_prop$Rmin, 1))
))
colnames(values) <- c("Characteristic", "GFP1 Isobestic", "GFP1 Max", "GFP2 Isobestic", "GFP2 Max")
knitr::kable(values, caption = "Table 2: Characteristics of GFP1 and GFP2 sensors")
plot(gfp2_max_prop$OxD_sen ~ gfp2_max_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
plot(gfp2_iso_prop$OxD_sen ~ gfp2_max_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
plot(gfp2_iso_prop$OxD_sen ~ gfp2_iso_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
plot(gfp1_iso_prop$OxD_sen ~ gfp1_iso_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
plot(gfp2_iso_prop$OxD_sen ~ gfp2_iso_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
plot(gfp2_max_prop$OxD_sen ~ gfp2_max_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
plot(gfp1_max_prop$OxD_sen ~ gfp1_max_prop$RDoublePrime, type = 'l', col = colors4[2], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized")
points(gfp1_iso_prop$OxD_sen ~ gfp1_iso_prop$RDoublePrime, type = 'l', col = colors4[1])
plot(gfp1_max_prop$OxD_sen ~ gfp1_max_prop$RDoublePrime, type = 'l', col = colors4[2], lwd = 2, bty = 'l', xlab = "R''", ylab = "Fraction of sensors oxidized", ylim = c(0, 5))
points(gfp1_iso_prop$OxD_sen ~ gfp1_iso_prop$RDoublePrime, type = 'l', col = colors4[1])
plot(gfp1_max_prop$OxD_sen ~ gfp1_max_prop$RDoublePrime, type = 'l', col = colors4[2], lwd = 2, bty = 'l', xlab = "R''", ylab = "Relative sensitivity of OxD", ylim = c(0, 5))
points(gfp1_iso_prop$OxD_sen ~ gfp1_iso_prop$RDoublePrime, type = 'l', col = colors4[1])
points(gfp2_max_prop$OxD_sen ~ gfp2_max_prop$RDoublePrime, type = 'l', col = colors4[3])
points(gfp2_iso_prop$OxD_sen ~ gfp2_iso_prop$RDoublePrime, type = 'l', col = colors4[4])
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 0.8, 0.4, 0.8))
plot(gfp1_max_prop$OxD_sen ~ gfp1_max_prop$RDoublePrime, type = 'l', col = colors4[2], lwd = 2, bty = 'l', xlab = "R''", ylab = "Relative sensitivity of OxD", ylim = c(0, 5))
points(gfp1_iso_prop$OxD_sen ~ gfp1_iso_prop$RDoublePrime, type = 'l', col = colors4[1], lwd = 2)
points(gfp2_max_prop$OxD_sen ~ gfp2_max_prop$RDoublePrime, type = 'l', col = colors4[3], lwd = 2)
points(gfp2_iso_prop$OxD_sen ~ gfp2_iso_prop$RDoublePrime, type = 'l', col = colors4[4],lwd = 2)
legend("topright", xpd=TRUE, c("GFP1 Max", "GFP1 Iso", "GFP2 Max","GFP2 Iso"), pch = "-", lwd = 4, col = c(colors4[2], colors4[1], colors4[3], colors4[4]), cex = 1)
