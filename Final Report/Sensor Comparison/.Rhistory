rgb(224, 120, 34, maxColorValue = 255))
# Define plotting parameters
cex.lab <- 1.5
cex.axis <- 1.5
# Define the fraction oxidized
OXD <- function(R, Rmin, Rmax, delta) {
return (
(R - Rmin)/((R - Rmin) + (delta*(Rmax - R)))
)
}
# Define the redox potential
E <- function(e0, R, Rmin, Rmax, delta) {
return(e0 - 12.71 * log((delta*Rmax - delta*R)/(R-Rmin)))
}
Eeff <- function(delta_470, e0) {
return (
e0 - 12.71 * log(delta_470)
)
}
# Define the derivative of OxD
D_OXD <- function(R, Rmin, Rmax, delta) {
return (
(delta * (Rmax - Rmin)) /
((R * (delta - 1) - (delta * Rmax) + Rmin)^2)
)
}
# Define the derivative of E
D_E <- function(R, Rmin, Rmax) {
return(
(-12.71*(Rmax-Rmin))/((R-Rmin)*(R-Rmax))
)
}
# Define a percent error
Error_E <- function(R, Rmin, Rmax, delta, e0, percent_error) {
answer <- c()
for (Rind in R) {
if((Rind * (1 - percent_error/100) >= Rmin) && (Rind * (1 + percent_error/100) <= Rmax)) {
err <- max(
abs(E(R = Rind, e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta)
- E(R = Rind * (1 + percent_error/100), e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta)),
abs(E(R = Rind, e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta)
- E(R = Rind * (1 - percent_error/100), e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta))
)
answer <- c(answer, err)
}
else {
answer <- c(answer, Inf)
}
}
return(answer)
}
# Turn two pairs of lambda-emission spectra into a 3-column dataframe
combine <- function(ox_lambda, ox_value, red_lambda, red_value) {
start <- max(ox_lambda[1], red_lambda[1])
end <- min(ox_lambda[length(ox_lambda)], red_lambda[length(red_lambda)])
range <- seq(start, end, by = 0.1)
ox_value_new <- c()
red_value_new <- c()
for (lambda in range) {
# Find the ox value closest to the lambda
closest_value = Inf
closest_index = NaN
for (old_lambda_index in 1:length(ox_lambda)) {
old_lambda_diff = abs(ox_lambda[old_lambda_index] - lambda)
if (old_lambda_diff < closest_value) {
closest_value = old_lambda_diff
closest_index = old_lambda_index
}
}
ox_value_new <- c(ox_value_new, ox_value[closest_index])
# Find the red value closest to the lambda
closest_value = Inf
closest_index = NaN
for (old_lambda_index in 1:length(red_lambda)) {
old_lambda_diff = abs(red_lambda[old_lambda_index] - lambda)
if (old_lambda_diff < closest_value) {
closest_value = old_lambda_diff
closest_index = old_lambda_index
}
}
red_value_new <- c(red_value_new, red_value[closest_index])
}
return(data.frame(lambda = range, ox = ox_value_new, red = red_value_new))
}
# Write a function that, given a sensor and two sets of lambda bands, returns a list of properties
# Sensor data format:
initSensor <- function(sensor_data, lambda_1, lambda_2, e0) {
# Clean data
ox_lambda <- na.omit(sensor_data[[1]])
ox_value <- na.omit(sensor_data[[2]])
red_lambda <- na.omit(sensor_data[[3]])
red_value <- na.omit(sensor_data[[4]])
# Set delta
delta <- mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
# Set Rmin and Rmax
Rmin <- mean(red_value[red_lambda >= lambda_1[1] & red_lambda <= lambda_1[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
Rmax <- mean(ox_value[ox_lambda >= lambda_1[1] & ox_lambda <= lambda_1[2]]) /
mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]])
# Generate some R, OxD, and E values
R <- seq(Rmin, Rmax, by = 0.001)
OxD_values <- OXD(R, Rmin, Rmax, delta)
E_values <- E(e0, R, Rmin, Rmax, delta)
# Generate R' and R''
RPrime <- R/Rmin
RDoublePrime <- (R-Rmin)/(Rmax-Rmin)
# Generate partial derivatives
OxD_sen <- D_OXD(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta)
E_sen <- D_E(R = R, Rmin = Rmin, Rmax = Rmax)
# Generate 5% errors
Error5 <- Error_E(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta, e0 = e0, percent_error = 5)
# Return the final list
return(list(data = combine(ox_lambda, ox_value, red_lambda, red_value), e0 = e0, Eeff = Eeff(delta_470 = delta, e0 = e0),
OxD_sen = OxD_sen, E_sen = E_sen, Error5 = Error5,
delta = delta, Rmin = Rmin, Rmax = Rmax, R = R, OxD = OxD_values, E = E_values,
RPrime = RPrime, RDoublePrime = RDoublePrime))
}
# Import GFP1/2 data
gfp1r12_dat <- read.csv("rogfp1r12.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
setwd("C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/Final Report/Sensor Comparison")
# Import GFP1/2 data
gfp1r12_dat <- read.csv("rogfp1r12.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
iE_dat <- read.csv("iE/Spectra_IE_CSV.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
iL_dat <- read.csv("iL/Spectra_iL_CSV.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1r12_e0 <-  -265
iE_e0 <- -236
iL_e0 <- -229
# Import GFP1/2 data
gfp1r12_dat <- read.csv("rogfp1r12.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
iE_dat <- read.csv("iE/Spectra_IE_CSV.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
iL_dat <- read.csv("iL/Spectra_iL_CSV.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1r12_e0 <-  -265
iE_e0 <- -236
iL_e0 <- -229
# Get other properties
gfp1r12_prop <- initSensor(gfp1r12_dat, c(400, 420), c(460, 480), gfp1r12_e0)
gfp1iE_prop <- initSensor(iE_dat, c(400, 420), c(460, 480), iE_e0)
gfp1iL_prop <- initSensor(iL_dat, c(400, 420), c(460, 480), iL_e0)
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -220)
plot(gfp1r12_prop$E ~ error_4, type = 'l', xlim = c(0, 5), ylim = bounds, col = colors[9], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -220)
plot(gfp1r12_prop$E ~ error_4, type = 'l', xlim = c(0, 5), ylim = bounds, col = colors[9], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -220)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 5), ylim = bounds, col = colors[9], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
bounds <- c(-290, -220)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 5), ylim = bounds, col = colors[9], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l')
points(gfp1iE_prop$E ~ error_4_iE, type = 'l')
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -220)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors[9], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l')
points(gfp1iE_prop$E ~ error_4_iE, type = 'l')
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors[9], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l')
points(gfp1iE_prop$E ~ error_4_iE, type = 'l')
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[0], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[1])
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[2])
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[3], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[1])
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[2])
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2])
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3])
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-290, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 3)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-320, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 3)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-310, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 3)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-300, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 3)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-300, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 2)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-300, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 2)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
legend("topleft", xpd=TRUE, c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), pch = "-", lwd = 4, col = colors[1:3], cex = 1)
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-300, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[1], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[3], lwd = 2)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
legend("topleft", xpd=TRUE, c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), pch = "-", lwd = 4, col = colors4[1:3], cex = 1)
par(pty = 's', mfrow = c(1,1), mai = c(0.4, 0.8, 0.4, 0.8))
error_4_R12 = Error_E(gfp1r12_prop$R, Rmin = gfp1r12_prop$Rmin, Rmax = gfp1r12_prop$Rmax, e0 = gfp1r12_prop$e0, delta = gfp1r12_prop$delta, percent_error = 4)
error_4_iL = Error_E(gfp1iL_prop$R, Rmin = gfp1iL_prop$Rmin, Rmax = gfp1iL_prop$Rmax, e0 = gfp1iL_prop$e0, delta = gfp1iL_prop$delta, percent_error = 4)
error_4_iE = Error_E(gfp1iE_prop$R, Rmin = gfp1iE_prop$Rmin, Rmax = gfp1iE_prop$Rmax, e0 = gfp1iE_prop$e0, delta = gfp1iE_prop$delta, percent_error = 4)
colors <- coolwarm(9)
bounds <- c(-300, -200)
plot(gfp1r12_prop$E ~ error_4_R12, type = 'l', xlim = c(0, 10), ylim = bounds, col = colors4[3], lwd = 2, bty = 'l', xlab = "Expected accuracy (mV)", ylab = expression(E[GSH]), main = "")
points(gfp1iL_prop$E ~ error_4_iL, type = 'l', col = colors4[2], lwd = 2)
points(gfp1iE_prop$E ~ error_4_iE, type = 'l', col = colors4[1], lwd = 2)
axis(side = 1, at = seq(0, 5, by = 0.1),
labels = FALSE, tcl = -0.2)
axis(side = 2, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
points(x = c(2,2), y = (bounds), type = "l")
legend("topleft", xpd=TRUE, c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), pch = "-", lwd = 4, col = colors4[3:1], cex = 1)
boxplot?
?boxplot
boxplot(c(1,5), c(5,10), c(20, 30))
summary(subset(gfp1r12_prop$E, gfp1r12_prop$error_4_R12 < 4))
summary(subset(gfp1r12_prop$E, gfp1r12_prop$error_4_R12 < 4))
gfp1r12_prop$error_4_R12
error_4_R12
summary(subset(gfp1r12_prop$E, error_4_R12 < 4))
summary(subset(gfp1iL_prop$E, error_4_iL < 4))
summary(subset(gfp1iE_prop$E, error_4_iE < 4))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1])
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = FALSE)
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE)
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, width = 1)
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, width = c(1,1,1))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, width = c(0.5,0.5,0.5))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 4
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 4
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(-286, -229), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
iL
iL$Min
typeof(iL)
iL[1]
iL[-1]
iL[5]
iL[6]
error <- 4
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(-246, -210), c(-255, -212), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 4
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 3
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 2
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 4mV")
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV")
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", xlim = c(-300, -200))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV")
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], R12[6]), c(iL[1], iL[6]), c(iE[1], iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200))
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2, notch = FALSE)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2, notch = TRUE)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2, range = 1)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2, range = 100)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
par(mfrow = c(1,1), mai = c(0.8, 1.2, 0.4, 0.4))
error <- 2.5
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
iL <- summary(subset(gfp1iL_prop$E, error_4_iL < error))
iE <- summary(subset(gfp1iE_prop$E, error_4_iE < error))
boxplot(c(R12[1], gfp1r12_prop$e0, R12[6]), c(iL[1], gfp1iL_prop$e0, iL[6]), c(iE[1],gfp1iE_prop$e0, iE[6]), col = colors4[3:1], horizontal = TRUE, names = c("roGFP1-R12", "roGFP1-iL", "roGFP1-iE"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2.5 mV", ylim = c(-300, -200), las = 2, range = 1000)
axis(side = 1, at = seq(-300, -200, by = 1),
labels = FALSE, tcl = -0.2)
error <- 2
R12 <- summary(subset(gfp1r12_prop$E, error_4_R12 < error))
boxplot(c(R12[1], R12[6]), c(-280,-260), col = colors4[2:1], horizontal = TRUE, names = c("roGFP1-R12", "Relevant Range"), xlab = expression(E[GSH]), main = "Ranges suitable at an accuracy of 2 mV", ylim = c(-300, -200), las = 2)
colors4
