E0_1 <- -270
E0_2 <-  -256
Rmin_1 <-  1
Rmin_2 <-  1
Rmax_1 <-  6
Rmax_2 <-  6
Delta_1 <-  1
Delta_2 <-  3
range <- c(-280, -260)
# Values for main R-E plot
R_1 <- seq(Rmin_1, Rmax_1, by = 0.0001)
R_2 <- seq(Rmin_2, Rmax_2, by = 0.0001)
E_1 <- E_OXD(E0_1, R_1, Rmin_1, Rmax_1, Delta_1)
E_2 <- E_OXD(E0_2, R_2, Rmin_2, Rmax_2, Delta_2)
# Values for derivative
d_1 <- D_E(R_1, Rmin_1, Rmax_1)
d_2 <- D_E(R_2, Rmin_2, Rmax_2)
d_1_norm <- subset(d_1/sort(d_1)[2], d_1/sort(d_1)[2] > -Inf & d_1/sort(d_1)[2] < Inf)
d_2_norm <- subset(d_2/sort(d_2)[2], d_2/sort(d_2)[2] > -Inf & d_2/sort(d_2)[2] < Inf)
R_1_trim <- subset(R_1,  d_1/sort(d_1)[2] > -Inf & d_1/sort(d_1)[2] < Inf)
R_2_trim <- subset(R_2,  d_2/sort(d_2)[2] > -Inf & d_2/sort(d_2)[2] < Inf)
E_1_trim <- subset(E_1,  d_1/sort(d_1)[2] > -Inf & d_1/sort(d_1)[2] < Inf)
E_2_trim <- subset(E_2,  d_2/sort(d_2)[2] > -Inf & d_2/sort(d_2)[2] < Inf)
# Relevant zone
# rel_x <- values_sig[1]$R_init
# rel_y <- E_OXD(-265, rel_x, 0.667, 5.207, 0.171)
# rel_y_der <- D_E(rel_x, 0.667, 5.207)/sort(derivative_init)[2]
par(pty = "s", mfrow = c(1,2))
# Derivative
plot(d_1~E_1, type = "l", ylab = "E Sensitivity (Normalized)", xlab = "E", ylim = c(1, 1000), xlim =c(-350, -180) , main = "Sensitivity of Sensor 1", col = "#66c2a5")
plot(d_2~E_2, type = "l", ylab = "E Sensitivity (Normalized)", xlab = "E", ylim = c(1, 1000), xlim =c(-350, -180) , main = "Sensitivity of Sensor 2", col = "#fc8d62")
legend("topright", inset=c(-.3,0.0), xpd=TRUE, c("1", "2"), pch = "-", lwd = 4, col = c("#66c2a5", "#fc8d62"))
#legend("center",inset=c(0, -1), xpd=TRUE, c("1", "2", "3"), pch = "-", lwd = 4, col = c("#66c2a5", "#fc8d62", "#8da0cb"))
#polygon(c(head(rel_x,1),rel_x, tail(rel_x, 2)[1]), c(1, rel_y_der, 1), col = '#1b9e77')
#legend("topright", inset=c(.13,0.05), xpd=TRUE, c("Relevant region"), pch = "-", lwd = 4, col = c("#1b9e77"))
log(0.171) * 12.71
ln(0.171) * 12.71
log(0.171) * 12.71
12.71*log(2)
12.71*log(1)
12.71*log(4)
12.71*log(8)
12.71*log(8) - 12.71*log(4)
12.71*log(1/2)
nvec = c('one'=c(1,1,1), 'two'=c(2,2,2))
nvec
emission <- data.frame(x = c(410, 420, 430, 440, 450), y = c(1, 2, 3, 4, 5))
emission
emission <- data.frame(lambda = c(410, 420, 430, 440, 450), emission = c(1, 2, 3, 4, 5))
specrum_data <- data.frame(lambda = c(410, 420, 430, 440, 450), emission = c(1, 2, 3, 4, 5))
spectrum_data <- data.frame(lambda = c(410, 420, 430, 440, 450), emission = c(1, 2, 3, 4, 5))
spectrum_data
list(rmax = 5)
spectrum_data <- data.frame(lambda = c(410, 420, 430, 440, 450), emission_state1 = c(1, 2, 3, 4, 5), emission_state2 = c(10, 20, 30, 40, 50))
spectrum_data
spectrum_data <- data.frame(lambda = c(410, 420, 430, 440, 450), emission_state1 = c(1, 2, 3, 4, 5), emission_state2 = c(50, 40, 30, 20, 10))
specrum_data
spectrum_data
emission_410 <- subset(spectrum_data, spectrum_data$lambda == 410)
emission_450 <- subset(spectrum_data, spectrum_data$lambda == 450)
E <- function(e0, R, Rmin, Rmax, delta) {
return(e0 - 12.71 * log((delta*Rmax - delta*R)/(R-Rmin)))
}
emission_410 <- subset(spectrum_data, spectrum_data$lambda == 410)
emission_450 <- subset(spectrum_data, spectrum_data$lambda == 450)
e0 <- -275,
Rmin <- emission_410$emission_state1/emission_450$emission_state1
emission_410 <- subset(spectrum_data, spectrum_data$lambda == 410)
emission_450 <- subset(spectrum_data, spectrum_data$lambda == 450)
e0 <- -275
Rmin <- emission_410$emission_state1/emission_450$emission_state1
Rmax <- emission_410$emission_state2/emission_450$emission_state2
delta <- emission_450$emission_state1/emission_450$emission_state2
R <- seq(Rmin, Rmax, by = 0.001)
E_values <- E(e0, R, Rmin, Rmax, delta)
list_410_450 <- list(e0 = e0, Rmin = RminRmax = Rmax
delta = delta, R = R, E_values = E_values)
list_410_450 <- list(e0 = e0, Rmin = Rmin, Rmax = Rmax,
delta = delta, R = R, E_values = E_values)
list_410_450
getOption("max.print")
getOption("max.print") = 5
options(max.print = 5)
list_410_450
list(c(1,2) = 1,c(2,3) = "foo",c(3,4) = 1:5)
R
tribble(R)
library(tribble)
install.packages("tidyverse")
library(tidyverse)
tribble(R)
tribble(x = R, y = c(1))
tribble(~thing, R)
tribble(~thing, R)$thing
tribble(~thing, R)$thing[1]
tribble(~thing, R)$thing
typeof(tribble(~thing, R)$thing)
typeof(tribble(~thing, R)$thing$1)
typeof(tribble(~thing, R)$thing[[1]])
tribble(~thing, R)$thing[[1]]
c(1,2,list(a = "a"))
data.frame(c(1,2,list(a = "a")))
data.frame(c(1,2,list(a = "a", b = "123")))
data.frame(c(1,2,list(a = "a", b = c(1,2,3))))
options(max.print = 50)
data.frame(c(1,2,list(a = "a", b = c(1,2,3))))
deltas <- seq(exp(-8), exp(8), by = 0.01)
deltas <- seq(exp(-8), exp(8), by = 0.01)
deltas <- seq(exp(-8), exp(8), by = 0.1)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
knitr::opts_chunk$set(echo = FALSE)
# Define coolwarm color gradient
coolwarm <- colorRampPalette(c(
rgb( 60, 81,198, maxColorValue = 255),
rgb( 61, 86,203, maxColorValue = 255),
rgb( 63, 91,207, maxColorValue = 255),
rgb( 65, 96,212, maxColorValue = 255),
rgb( 67,101,216, maxColorValue = 255),
rgb( 69,106,220, maxColorValue = 255),
rgb( 71,111,224, maxColorValue = 255),
rgb( 74,116,227, maxColorValue = 255),
rgb( 76,121,231, maxColorValue = 255),
rgb( 79,127,233, maxColorValue = 255),
rgb( 83,132,236, maxColorValue = 255),
rgb( 86,137,238, maxColorValue = 255),
rgb( 90,143,240, maxColorValue = 255),
rgb( 94,148,242, maxColorValue = 255),
rgb( 99,153,243, maxColorValue = 255),
rgb(103,159,244, maxColorValue = 255),
rgb(109,164,244, maxColorValue = 255),
rgb(114,169,245, maxColorValue = 255),
rgb(120,174,245, maxColorValue = 255),
rgb(126,179,245, maxColorValue = 255),
rgb(132,184,244, maxColorValue = 255),
rgb(139,188,243, maxColorValue = 255),
rgb(146,193,242, maxColorValue = 255),
rgb(153,197,241, maxColorValue = 255),
rgb(161,201,239, maxColorValue = 255),
rgb(169,205,238, maxColorValue = 255),
rgb(177,209,236, maxColorValue = 255),
rgb(186,212,233, maxColorValue = 255),
rgb(195,215,231, maxColorValue = 255),
rgb(204,218,229, maxColorValue = 255),
rgb(214,221,226, maxColorValue = 255),
rgb(223,223,223, maxColorValue = 255),
rgb(235,218,215, maxColorValue = 255),
rgb(245,213,207, maxColorValue = 255),
rgb(255,206,198, maxColorValue = 255),
rgb(255,192,184, maxColorValue = 255),
rgb(255,180,170, maxColorValue = 255),
rgb(255,168,159, maxColorValue = 255),
rgb(255,157,148, maxColorValue = 255),
rgb(255,147,139, maxColorValue = 255),
rgb(255,138,130, maxColorValue = 255),
rgb(255,129,122, maxColorValue = 255),
rgb(255,121,115, maxColorValue = 255),
rgb(255,113,109, maxColorValue = 255),
rgb(255,105,103, maxColorValue = 255),
rgb(255, 98, 98, maxColorValue = 255),
rgb(255, 91, 93, maxColorValue = 255),
rgb(255, 85, 89, maxColorValue = 255),
rgb(255, 78, 85, maxColorValue = 255),
rgb(255, 72, 81, maxColorValue = 255),
rgb(255, 67, 78, maxColorValue = 255),
rgb(255, 61, 75, maxColorValue = 255),
rgb(255, 56, 72, maxColorValue = 255),
rgb(255, 50, 70, maxColorValue = 255),
rgb(255, 45, 67, maxColorValue = 255),
rgb(255, 41, 65, maxColorValue = 255),
rgb(252, 35, 62, maxColorValue = 255),
rgb(242, 30, 58, maxColorValue = 255),
rgb(233, 24, 55, maxColorValue = 255),
rgb(223, 20, 51, maxColorValue = 255),
rgb(212, 15, 48, maxColorValue = 255),
rgb(202, 11, 44, maxColorValue = 255),
rgb(191,  7, 41, maxColorValue = 255),
rgb(180,  4, 38, maxColorValue = 255)))
# Define plotting parameters
cex.lab <- 1.5
cex.axis <- 1.5
Eeff <- function(delta_470, e0) {
return (
e0 - 12.71 * log(delta_470)
)
}
deltas <- seq(exp(-8), exp(8), by = 0.1)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="s", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
par(pty = 's')
deltas <- seq(exp(-8), exp(8), by = 0.1)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
par(pty = 's')
deltas <- seq(exp(-8), exp(8), by = 0.1)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(delta), type = "l", ylab = "E_effective", bty ="L", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", xlim = c(-290, -240), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-290, -240), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-290, -250), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-310, -230), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-320, -230), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-300, -230), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-280, -230), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-280, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- seq(exp(-5), exp(5), by = 0.1)
par(pty = 's')
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-280, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-300, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-350, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-33, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- seq(exp(-5), exp(5), by = 0.01)
par(pty = 's')
plot(Eeff(deltas, -270) ~ log(deltas), type = "l", ylab = "E_effective", bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
lines(predict(lo), col='red', lwd=2)
c(2:10 %o% 10^(3:7))
c(exp(-5:5))
deltas <- c(exp(-5:5))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(seq(-5,-5,by = 0.01)))
deltas
deltas <- c(exp(seq(-5,5,by = 0.01)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(seq(-5,5,by = 0.01)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(seq(-5,5,by = 0.1)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(seq(-5,5,by = 0.5)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(seq(-5,5,by = 1)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(seq(-5,5,by = 1.5)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(c(-5, 5))))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
deltas <- c(exp(c(-5, 5)))
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
par(pty = 's')
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective", type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
segmentInf(Eeff(deltas, -270), log(deltas))
fit <- lm(ys~xs)
abline(fit)
segmentInf <- function(xs, ys){
fit <- lm(ys~xs)
abline(fit)
}
deltas <- c(exp(c(-5, 5)))
segmentInf <- function(xs, ys){
fit <- lm(ys~xs)
abline(fit)
}
deltas <- c(exp(c(-5, 5)))
par(pty = 's')
lo <- loess(Eeff(deltas, -270) ~ log(deltas))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
segmentInf(Eeff(deltas, -270), log(deltas))
segmentInf <- function(xs, ys){
fit <- lm(ys~xs)
abline(fit)
}
deltas <- c(exp(c(-5, 5)))
par(pty = 's')
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
segmentInf(Eeff(deltas, -270), log(deltas))
segmentInf( log(deltas), Eeff(deltas, -270))
plot(0, ylab = "E_effective",bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
segmentInf( log(deltas), Eeff(deltas, -270))
plot(0, ylab = "E_effective",bty ="L", main = "", xlim = c(-5, 5), ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
segmentInf( log(deltas), Eeff(deltas, -270))
plot(Eeff(deltas, -270) ~ log(deltas), ylab = "E_effective",type = 'l',bty ="L", main = "", ylim = c(-330, -200), cex.axis = cex.axis, cex.lab = cex.lab)
setwd("C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/Final Report/Sensor Comparison")
knitr::opts_chunk$set(echo = FALSE)
# Define coolwarm color gradient
coolwarm <- colorRampPalette(c(
rgb( 60, 81,198, maxColorValue = 255),
rgb( 61, 86,203, maxColorValue = 255),
rgb( 63, 91,207, maxColorValue = 255),
rgb( 65, 96,212, maxColorValue = 255),
rgb( 67,101,216, maxColorValue = 255),
rgb( 69,106,220, maxColorValue = 255),
rgb( 71,111,224, maxColorValue = 255),
rgb( 74,116,227, maxColorValue = 255),
rgb( 76,121,231, maxColorValue = 255),
rgb( 79,127,233, maxColorValue = 255),
rgb( 83,132,236, maxColorValue = 255),
rgb( 86,137,238, maxColorValue = 255),
rgb( 90,143,240, maxColorValue = 255),
rgb( 94,148,242, maxColorValue = 255),
rgb( 99,153,243, maxColorValue = 255),
rgb(103,159,244, maxColorValue = 255),
rgb(109,164,244, maxColorValue = 255),
rgb(114,169,245, maxColorValue = 255),
rgb(120,174,245, maxColorValue = 255),
rgb(126,179,245, maxColorValue = 255),
rgb(132,184,244, maxColorValue = 255),
rgb(139,188,243, maxColorValue = 255),
rgb(146,193,242, maxColorValue = 255),
rgb(153,197,241, maxColorValue = 255),
rgb(161,201,239, maxColorValue = 255),
rgb(169,205,238, maxColorValue = 255),
rgb(177,209,236, maxColorValue = 255),
rgb(186,212,233, maxColorValue = 255),
rgb(195,215,231, maxColorValue = 255),
rgb(204,218,229, maxColorValue = 255),
rgb(214,221,226, maxColorValue = 255),
rgb(223,223,223, maxColorValue = 255),
rgb(235,218,215, maxColorValue = 255),
rgb(245,213,207, maxColorValue = 255),
rgb(255,206,198, maxColorValue = 255),
rgb(255,192,184, maxColorValue = 255),
rgb(255,180,170, maxColorValue = 255),
rgb(255,168,159, maxColorValue = 255),
rgb(255,157,148, maxColorValue = 255),
rgb(255,147,139, maxColorValue = 255),
rgb(255,138,130, maxColorValue = 255),
rgb(255,129,122, maxColorValue = 255),
rgb(255,121,115, maxColorValue = 255),
rgb(255,113,109, maxColorValue = 255),
rgb(255,105,103, maxColorValue = 255),
rgb(255, 98, 98, maxColorValue = 255),
rgb(255, 91, 93, maxColorValue = 255),
rgb(255, 85, 89, maxColorValue = 255),
rgb(255, 78, 85, maxColorValue = 255),
rgb(255, 72, 81, maxColorValue = 255),
rgb(255, 67, 78, maxColorValue = 255),
rgb(255, 61, 75, maxColorValue = 255),
rgb(255, 56, 72, maxColorValue = 255),
rgb(255, 50, 70, maxColorValue = 255),
rgb(255, 45, 67, maxColorValue = 255),
rgb(255, 41, 65, maxColorValue = 255),
rgb(252, 35, 62, maxColorValue = 255),
rgb(242, 30, 58, maxColorValue = 255),
rgb(233, 24, 55, maxColorValue = 255),
rgb(223, 20, 51, maxColorValue = 255),
rgb(212, 15, 48, maxColorValue = 255),
rgb(202, 11, 44, maxColorValue = 255),
rgb(191,  7, 41, maxColorValue = 255),
rgb(180,  4, 38, maxColorValue = 255)))
colors4 <- c(
rgb(151, 99, 172, maxColorValue = 255),
rgb(214, 154, 191, maxColorValue = 255),
rgb(249, 188, 112, maxColorValue = 255),
rgb(224, 120, 34, maxColorValue = 255))
# Define plotting parameters
cex.lab <- 1.5
cex.axis <- 1.5
# Define the fraction oxidized
OXD <- function(R, Rmin, Rmax, delta) {
return (
(R - Rmin)/((R - Rmin) + (delta*(Rmax - R)))
)
}
# Define the redox potential
E <- function(e0, R, Rmin, Rmax, delta) {
return(e0 - 12.71 * log((delta*Rmax - delta*R)/(R-Rmin)))
}
Eeff <- function(delta_470, e0) {
return (
e0 - 12.71 * log(delta_470)
)
}
# Define the derivative of OxD
D_OXD <- function(R, Rmin, Rmax, delta) {
return (
(delta * (Rmax - Rmin)) /
((R * (delta - 1) - (delta * Rmax) + Rmin)^2)
)
}
# Define the derivative of E
D_E <- function(R, Rmin, Rmax) {
return(
(-12.71*(Rmax-Rmin))/((R-Rmin)*(R-Rmax))
)
}
# Define a percent error
Error_E <- function(R, Rmin, Rmax, delta, e0, percent_error) {
answer <- c()
for (Rind in R) {
if((Rind * (1 - percent_error/100) >= Rmin) && (Rind * (1 + percent_error/100) <= Rmax)) {
err <- max(
abs(E(R = Rind, e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta)
- E(R = Rind * (1 + percent_error/100), e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta)),
abs(E(R = Rind, e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta)
- E(R = Rind * (1 - percent_error/100), e0 = e0, Rmin = Rmin, Rmax = Rmax, delta = delta))
)
answer <- c(answer, err)
}
else {
answer <- c(answer, Inf)
}
}
return(answer)
}
# Turn two pairs of lambda-emission spectra into a 3-column dataframe
combine <- function(ox_lambda, ox_value, red_lambda, red_value) {
start <- max(ox_lambda[1], red_lambda[1])
end <- min(ox_lambda[length(ox_lambda)], red_lambda[length(red_lambda)])
range <- seq(start, end, by = 0.1)
ox_value_new <- c()
red_value_new <- c()
for (lambda in range) {
# Find the ox value closest to the lambda
closest_value = Inf
closest_index = NaN
for (old_lambda_index in 1:length(ox_lambda)) {
old_lambda_diff = abs(ox_lambda[old_lambda_index] - lambda)
if (old_lambda_diff < closest_value) {
closest_value = old_lambda_diff
closest_index = old_lambda_index
}
}
ox_value_new <- c(ox_value_new, ox_value[closest_index])
# Find the red value closest to the lambda
closest_value = Inf
closest_index = NaN
for (old_lambda_index in 1:length(red_lambda)) {
old_lambda_diff = abs(red_lambda[old_lambda_index] - lambda)
if (old_lambda_diff < closest_value) {
closest_value = old_lambda_diff
closest_index = old_lambda_index
}
}
red_value_new <- c(red_value_new, red_value[closest_index])
}
return(data.frame(lambda = range, ox = ox_value_new, red = red_value_new))
}
# Write a function that, given a sensor and two sets of lambda bands, returns a list of properties
# Sensor data format:
initSensor <- function(sensor_data, lambda_1, lambda_2, e0) {
# Clean data
ox_lambda <- na.omit(sensor_data[[1]])
ox_value <- na.omit(sensor_data[[2]])
red_lambda <- na.omit(sensor_data[[3]])
red_value <- na.omit(sensor_data[[4]])
# Set delta
delta <- mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
# Set Rmin and Rmax
Rmin <- mean(red_value[red_lambda >= lambda_1[1] & red_lambda <= lambda_1[2]]) /
mean(red_value[red_lambda >= lambda_2[1] & red_lambda <= lambda_2[2]])
Rmax <- mean(ox_value[ox_lambda >= lambda_1[1] & ox_lambda <= lambda_1[2]]) /
mean(ox_value[ox_lambda >= lambda_2[1] & ox_lambda <= lambda_2[2]])
# Generate some R, OxD, and E values
R <- seq(Rmin, Rmax, by = 0.001)
OxD_values <- OXD(R, Rmin, Rmax, delta)
E_values <- E(e0, R, Rmin, Rmax, delta)
# Generate R' and R''
RPrime <- R/Rmin
RDoublePrime <- (R-Rmin)/(Rmax-Rmin)
# Generate partial derivatives
OxD_sen <- D_OXD(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta)
E_sen <- D_E(R = R, Rmin = Rmin, Rmax = Rmax)
# Generate 5% errors
Error5 <- Error_E(R = R, Rmin = Rmin, Rmax = Rmax, delta = delta, e0 = e0, percent_error = 5)
# Return the final list
return(list(data = combine(ox_lambda, ox_value, red_lambda, red_value), e0 = e0, Eeff = Eeff(delta_470 = delta, e0 = e0),
OxD_sen = OxD_sen, E_sen = E_sen, Error5 = Error5,
delta = delta, Rmin = Rmin, Rmax = Rmax, R = R, OxD = OxD_values, E = E_values,
RPrime = RPrime, RDoublePrime = RDoublePrime))
}
# Import GFP1/2 data
gfp1r12_dat <- read.csv("rogfp1r12.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1r12_e0 <-  -265
# Get other properties
gfp1_prop <- initSensor(gfp1_dat, c(390, 410), c(470, 480), gfp1_e0)
# Import GFP1/2 data
gfp1r12_dat <- read.csv("rogfp1r12.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1r12_e0 <-  -265
# Get other properties
gfp1r12_prop <- initSensor(gfp1r12_dat, c(390, 410), c(470, 480), gfp1_e0)
# Import GFP1/2 data
gfp1r12_dat <- read.csv("rogfp1r12.csv", header = FALSE, stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM")
# Set known midpoint potentials
gfp1r12_e0 <-  -265
# Get other properties
gfp1r12_prop <- initSensor(gfp1r12_dat, c(390, 410), c(470, 480), gfp1r12_e0)
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 0.8, 0.4, 0.8))
plot(gfp1f12_prop$data$ox ~ gfp1r12_prop$data$lambda, type = 'l', col = coolwarm(2)[1], main = "Emission spectrum of GFP1R12", xlab = expression(lambda), ylab = "Emission (relative)", bty = 'L')
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 0.8, 0.4, 0.8))
plot(gfp1r12_prop$data$ox ~ gfp1r12_prop$data$lambda, type = 'l', col = coolwarm(2)[1], main = "Emission spectrum of GFP1R12", xlab = expression(lambda), ylab = "Emission (relative)", bty = 'L')
points(gfp1r12_prop$data$red ~ gfp1r12_prop$data$lambda, type = 'l', col = coolwarm(2)[2])
legend("topright", xpd=TRUE, c("Oxidized", "Reduced"), pch = "-", lwd = 4, col = c(coolwarm(2)), cex = 1)
par(pty = 's', mfrow = c(1,2), mai = c(0.4, 0.8, 0.4, 0.8))
plot(gfp1r12_prop$data$ox ~ gfp1r12_prop$data$lambda, type = 'l', col = coolwarm(2)[1], main = "Emission spectrum of GFP1R12", xlab = expression(lambda), ylab = "Emission (relative)", bty = 'L')
points(gfp1r12_prop$data$red ~ gfp1r12_prop$data$lambda, type = 'l', col = coolwarm(2)[2])
