gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75)
plot(gg)
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
acceptable_error <- 2
error_model <- function(x) {return(0.03*x)}
minMaxMatrix <- c()
for (sensorName in sensorList) {
sensor <- get(sensorName)
sensorName <- str_replace(sensorName, "_sensor", "")
error_data <- getErrorTable(sensor, R = getR(sensor),
FUN = getE, Error_Model = error_model)
error_filter <- subset(error_data,
error_data$max_abs_error < acceptable_error)
minimum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = min(error_filter$FUN_true))
maximum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = max(error_filter$FUN_true))
minMaxMatrix <- rbind(minMaxMatrix, c(sensorName, round(minimum, 0), round(maximum,0))
}
acceptable_error <- 2
error_model <- function(x) {return(0.03*x)}
minMaxMatrix <- c()
for (sensorName in sensorList) {
sensor <- get(sensorName)
sensorName <- str_replace(sensorName, "_sensor", "")
error_data <- getErrorTable(sensor, R = getR(sensor),
FUN = getE, Error_Model = error_model)
error_filter <- subset(error_data,
error_data$max_abs_error < acceptable_error)
minimum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = min(error_filter$FUN_true))
maximum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = max(error_filter$FUN_true))
minMaxMatrix <- rbind(minMaxMatrix, c(sensorName, round(minimum, 0), round(maximum,0)))
}
ranges <- data.frame(minMaxMatrix)
colnames(ranges) <- c("Sensor_Name", "Minimum", "Maximum")
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
legend.position="top",
panel.border=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
legend.position="top",
panel.border=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
labs(x=NULL,
y=NULL,
title="Sensor Ranges, 95% accurate to 2mV",
subtitle="Assumes an error model of R = R +/- 0.03*R",
caption="") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
legend.position="top",
panel.border=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
labs(x="E_GSH (mV)",
y=NULL,
title="Sensor Ranges, 95% accurate to 2mV",
caption="Assumes an error model of R = R +/- 0.03R",
subtitle="") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
legend.position="top",
panel.border=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
theme_set(theme_classic())
ranges$Sensor_Name <- factor(ranges$Sensor_Name,
levels=as.character(ranges$Sensor_Name))
gg <- ggplot(ranges, aes(x=Minimum, xend=Maximum,
y = Sensor_Name, group=Sensor_Name)) +
geom_dumbbell(color="#a3c4dc",
size=0.75) +
labs(x="E_GSH (mV)",
y=NULL,
title="",
caption="Assumes an error model of R = R +/- 0.03R",
subtitle="") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
legend.position="top",
panel.border=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1))
plot(gg)
ranges
getErrorTable(roGFP1_sensor)
gfp1_error <- getErrorTable(roGFP1_sensor, R = getR(roGFP1_sensor), FUN = getE, Error_Model = function(x){return(0.03*x)})
head(gfp1_error)
colnames(gfp1_error) <- c("True R", "Error in R", "True E", "(+) Error in E", "(-) Error in E", "Largest |Error| in E")
head(gfp1_error)
kable(head(gfp1_error))
colnames(gfp1_error) <- c("True R", "Error in R", "True E", "(+) Error in E", "(-) Error in E", "Largest Abs. Error in E")
kable(head(gfp1_error))
kable(gfp1_error[50:55])
kable(gfp1_error[50:55,])
head(gfp1_error)
ggplot(x = gfp1_error aes(x = 'True E', y = 'True R')) + geom_line()
ggplot(x = gfp1_error, aes(x = 'True E', y = 'True R')) + geom_line()
ggplot(gfp1_error, aes(x = 'True E', y = 'True R')) + geom_line()
colnames(gfp1_error)
ggplot(gfp1_error, aes(x = `True E`, y = `True R``)) + geom_line()
)
cancel
quit
ggplot(gfp1_error, aes(x = `True E`, y = `True R`)) + geom_line()
ggplot(gfp1_error, aes(x = `True E`, y = `True E` + `(+) Error in E`)) + geom_line()
errors <- data.frame(True = gfp1_error['True E'])
head(errors)
errors <- data.frame(True = rep(gfp1_error['True E'], 2))
errors <- data.frame(True = rep(gfp1_error['True E'], 2), Observed = c(gfp1_error['True E'] + gfp1_error['(+) Error in E'],
gfp1_error['True E'] + gfp1_error['(-) Error in E']))
head(errors)
head(c(gfp1_error['True E'] + gfp1_error['(+) Error in E'], gfp1_error['True E'] + gfp1_error['(-) Error in E'])))
head(c(gfp1_error['True E'] + gfp1_error['(+) Error in E'], gfp1_error['True E'] + gfp1_error['(-) Error in E']))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=55),tidy=TRUE)
shh <- suppressPackageStartupMessages
shh(require(sensorOverlord))
shh(require(ggplot2))
shh(require(cowplot))
shh(require(stringr))
shh(require(ggalt))
sensor_repo <- "../Raw_Spectra/"
# roGFP1
roGFP1_data <- read.csv(paste(sensor_repo, "rogfp1.csv", sep = ""), header = TRUE)
roGFP1_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP1_data$Lambda_Reduced,
values_minimum = roGFP1_data$Values_Reduced,
lambdas_maximum = roGFP1_data$Lambda_Oxidized,
values_maximum = roGFP1_data$Values_Oxidized)
roGFP1_sensor <- new("redoxSensor", Rmin = 4.3, Rmax = 30.6, delta = 0.2, e0 = -281)
# roGFP1-R9
roGFP1_R9_data <- read.csv(paste(sensor_repo, "rogfp1_R9.csv", sep = ""), header = TRUE)
roGFP1_R9_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP1_R9_data$Lambda_reduced,
values_minimum = roGFP1_R9_data$reduced,
lambdas_maximum = roGFP1_R9_data$Lambda_oxidized,
values_maximum = roGFP1_R9_data$oxidized)
roGFP1_R9_sensor <- new("redoxSensor", newSensorFromSpectra(roGFP1_R9_spectra,
lambda_1 = c(380, 400), lambda_2 = c(460, 480)),
e0 = -278)
# roGFP1-R12 empirical
roGFP1_R12_empirical_sensor <- new("redoxSensor",
Rmin = 0.667, Rmax = 5.207, delta = 0.171, e0 = -265)
# roGFP1-R12 from spectra
roGFP1_R12_data <- read.csv(paste(sensor_repo, "rogfp1_R12.csv", sep = ""),
header = FALSE)
roGFP1_R12_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP1_R12_data$V3,
values_minimum = roGFP1_R12_data$V4,
lambdas_maximum = roGFP1_R12_data$V1,
values_maximum = roGFP1_R12_data$V2)
roGFP1_R12_sensor <- new("redoxSensor", newSensorFromSpectra(roGFP1_R9_spectra,
lambda_1 = c(390, 410), lambda_2 = c(460, 480)),
e0 = -265)
# roGFP1_iE
roGFP1_iE_data <- read.csv(paste(sensor_repo, "rogfp1_iE.csv", sep = ""), header = FALSE, fileEncoding="UTF-8-BOM")
roGFP1_iE_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP1_iE_data$V3,
values_minimum = roGFP1_iE_data$V4,
lambdas_maximum = roGFP1_iE_data$V1,
values_maximum = roGFP1_iE_data$V2)
roGFP1_iE_sensor <- new("redoxSensor", Rmin = 0.856, Rmax = 3.875, delta = 0.5, e0 = -236)
# roGFP2
roGFP2_data <- read.csv(paste(sensor_repo, "rogfp2.csv", sep = ""), header = FALSE, fileEncoding="UTF-8-BOM")
roGFP2_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP2_data$V3,
values_minimum = roGFP2_data$V4,
lambdas_maximum = roGFP2_data$V1,
values_maximum = roGFP2_data$V2)
roGFP2_sensor <- new("redoxSensor", Rmin = 0.09, Rmax = 1.7, delta = 0.3, e0 = -272)
# grx1_roGFP2
grx1_roGFP2_sensor <-  new("redoxSensor", Rmin = 0.3, Rmax = 2.0, delta = 0.5, e0 = -272)
# roGFP2_iL
roGFP2_iL_data <- read.csv(paste(sensor_repo, "rogfp2_iL.csv", sep = ""), header = FALSE, fileEncoding="UTF-8-BOM")
roGFP2_iL_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP2_iL_data$V3,
values_minimum = roGFP2_iL_data$V4,
lambdas_maximum = roGFP2_iL_data$V1,
values_maximum = roGFP2_iL_data$V2)
roGFP2_iL_sensor <- new("redoxSensor", Rmin = 0.19, Rmax = 0.45, delta = 0.65, e0 = -229)
# roGFP3
roGFP3_data <- read.csv(paste(sensor_repo, "rogfp3.csv", sep = ""), header = TRUE)
roGFP3_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP3_data$Lambda_330,
values_minimum = roGFP3_data$X.330.mv,
lambdas_maximum = roGFP3_data$Lambda_240,
values_maximum = roGFP3_data$X.240.mv)
roGFP3_sensor <- new("redoxSensor", newSensorFromSpectra(roGFP3_spectra,
lambda_1 = c(380, 400), lambda_2 = c(460, 480)),
e0 = -299)
# roGFP4
roGFP4_data <- read.csv(paste(sensor_repo, "rogfp4.csv", sep = ""), header = TRUE)
roGFP4_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP4_data$Lambda_320,
values_minimum = roGFP4_data$X.320.mv,
lambdas_maximum = roGFP4_data$Lambda_230,
values_maximum = roGFP4_data$X.230.mv)
roGFP4_sensor <- new("redoxSensor", newSensorFromSpectra(roGFP4_spectra,
lambda_1 = c(380, 400), lambda_2 = c(460, 480)),
e0 = -286)
# roGFP5
roGFP5_data <- read.csv(paste(sensor_repo, "rogfp5.csv", sep = ""), header = TRUE)
roGFP5_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP5_data$Lambda_330 ,
values_minimum = roGFP5_data$X.330.mv,
lambdas_maximum = roGFP5_data$Lambda_250,
values_maximum = roGFP5_data$X.250.mv)
roGFP5_sensor <- new("redoxSensor", newSensorFromSpectra(roGFP5_spectra,
lambda_1 = c(380, 400), lambda_2 = c(460, 480)),
e0 = -296)
# roGFP6
roGFP6_data <- read.csv(paste(sensor_repo, "rogfp6.csv", sep = ""), header = TRUE)
roGFP6_spectra <- spectraMatrixFromValues(
lambdas_minimum = roGFP6_data$Lambda_310 ,
values_minimum = roGFP6_data$X.310.mv,
lambdas_maximum = roGFP6_data$Lambda_230,
values_maximum = roGFP6_data$X.230.mv)
roGFP6_sensor <- new("redoxSensor", newSensorFromSpectra(roGFP6_spectra,
lambda_1 = c(380, 400), lambda_2 = c(460, 480)),
e0 = -280)
gfp1_spectraPlot <- plotSpectra(roGFP1_spectra, "Reduced", "Oxidized") + ggtitle("roGFP1")
gfp2_spectraPlot <- plotSpectra(roGFP2_spectra, "Reduced", "Oxidized") + ggtitle("roGFP2")
gfp3_spectraPlot <- plotSpectra(roGFP3_spectra, "Reduced", "Oxidized") + ggtitle("roGFP3")
gfp4_spectraPlot <- plotSpectra(roGFP4_spectra, "Reduced", "Oxidized") + ggtitle("roGFP4")
gfp5_spectraPlot <- plotSpectra(roGFP5_spectra, "Reduced", "Oxidized") + ggtitle("roGFP5")
gfp6_spectraPlot <- plotSpectra(roGFP6_spectra, "Reduced", "Oxidized") + ggtitle("roGFP6")
plot_grid(gfp1_spectraPlot, gfp2_spectraPlot, gfp3_spectraPlot, gfp4_spectraPlot, gfp5_spectraPlot, gfp6_spectraPlot, ncol = 2)
gfp1_iE_spectraPlot <- plotSpectra(roGFP1_iE_spectra, "Reduced", "Oxidized") + ggtitle("roGFP1-iE")
gfp2_iL_spectraPlot <- plotSpectra(roGFP2_iL_spectra, "Reduced", "Oxidized") + ggtitle("roGFP1-iL")
plot_grid(gfp1_iE_spectraPlot, gfp2_iL_spectraPlot)
q <- function(...) {
sapply(match.call()[-1], deparse)
}
sensorList <- q(roGFP1_sensor, roGFP2_sensor, roGFP3_sensor, roGFP4_sensor,
roGFP5_sensor, roGFP6_sensor, roGFP1_iE_sensor, roGFP2_iL_sensor,
roGFP1_R9_sensor, roGFP1_R12_sensor, roGFP1_R12_empirical_sensor, grx1_roGFP2_sensor)
charsMatrix <- c()
for (sensorName in sensorList) {
sensor <- get(sensorName)
charsMatrix <- rbind(charsMatrix, c(sensorName, round(sensor@Rmin,2),
round(sensor@Rmax,2), round(sensor@delta,2), round(sensor@e0,2)))
}
knitr::kable(data.frame(charsMatrix), col.names = c("Sensor", "Rmin", "Rmax", "Delta", "e0"), digits = 2)
acceptable_error <- 2
error_model <- function(x) {return(0.03*x)}
minMaxMatrix <- c()
for (sensorName in sensorList) {
sensor <- get(sensorName)
sensorName <- str_replace(sensorName, "_sensor", "")
error_data <- getErrorTable(sensor, R = getR(sensor),
FUN = getE, Error_Model = error_model)
error_filter <- subset(error_data,
error_data$max_abs_error < acceptable_error)
minimum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = min(error_filter$FUN_true))
maximum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = max(error_filter$FUN_true))
minMaxMatrix <- rbind(minMaxMatrix, c(sensorName, round(minimum, 0), round(maximum,0)))
}
q <- function(...) {
sapply(match.call()[-1], deparse)
}
sensorList <- q(roGFP1_sensor, roGFP2_sensor, roGFP3_sensor, roGFP4_sensor,
roGFP5_sensor, roGFP6_sensor, roGFP1_iE_sensor, roGFP2_iL_sensor,
roGFP1_R9_sensor, roGFP1_R12_sensor, roGFP1_R12_empirical_sensor, grx1_roGFP2_sensor)
charsMatrix <- c()
for (sensorName in sensorList) {
sensor <- get(sensorName)
charsMatrix <- rbind(charsMatrix, c(sensorName, round(sensor@Rmin,2),
round(sensor@Rmax,2), round(sensor@delta,2), round(sensor@e0,2)))
}
knitr::kable(data.frame(charsMatrix), col.names = c("Sensor", "Rmin", "Rmax", "Delta", "e0"), digits = 2)
acceptable_error <- 2
error_model <- function(x) {return(0.03*x)}
minMaxMatrix <- c()
for (sensorName in sensorList) {
sensor <- get(sensorName)
sensorName <- str_replace(sensorName, "_sensor", "")
error_data <- getErrorTable(sensor, R = getR(sensor),
FUN = getE, Error_Model = error_model)
error_filter <- subset(error_data,
error_data$max_abs_error < acceptable_error)
minimum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = min(error_filter$FUN_true))
maximum <- ifelse(test = length(error_filter$FUN_true) == 0,
yes = NaN, no = max(error_filter$FUN_true))
minMaxMatrix <- rbind(minMaxMatrix, c(sensorName, round(minimum, 0), round(maximum,0)))
}
-265 + log(12.71*0.171)
-265 + (12.71*log(0.171))
-265 - (12.71*log(0.171))
1/16
1/32
16*4
1/16
1/64
12.71*log(*0.015625)
12.71*log(0.015625)
12.71*log(64)
12.71*log(16)
12.71*log(4)
12.71*log(2)
library(sensorOverlord)
help(package=sensorOverlord)
sensor <- new('redoxSensor', e0 = -265, Rmin = 1, Rmax = 5, delta = 1)
plotE_deriv(sensor)
sensor2 <- new('redoxSensor', e0 = -265, Rmin = 1, Rmax = 5, delta = 0.1)
plotE_deriv(sensor2)
plotE_deriv(sensor) + plotE_deriv(sensor2)
plot <- plotE_deriv(sensor2)
plot$data$E
combine_plots <- function(ggplot1, ggplot2) {}
combine_plots <- function(ggplot1, ggplot2) {
return(
ggplot1 +
ggplot2
)
}
plot
plot[1]
plot[1][1]
plot[1][,1]
plot$data
plot$data[1]
plot$data[2]
plot$data[1]
combine_plots <- function(ggplot1, ggplot2, color = black) {
return(
ggplot1 +
geom_line(x = ggplot2$data[1], y = ggplot2$data[2])
)
}
plot1 <- plot_E_deriv(sensor)
plot1 <- plotE_deriv(sensor)
plot2 <- plotE_deriv(sensor2)
combine_plots(plot1, plot2)
library(ggplot2)
combine_plots(plot1, plot2)
head(ggplot2$data)
combine_plots(plot1, plot2)
head(plot2$data)
head(plot2$data[1])
head(plot2$data[2])
combine_plots <- function(ggplot1, ggplot2, color = black) {
return(
ggplot1 +
geom_line(aes(x = ggplot2$data[1], y = ggplot2$data[2]))
)
}
combine_plots(plot1, plot2)
head(as.character(plot2$data[1]))
head(as.numeric(plot2$data[1]))
head(plot2$data[1])
head(plot2$data$R)
head(plot2$data[1,])
head(plot2$data[,1])
combine_plots <- function(ggplot1, ggplot2, color = black) {
return(
ggplot1 +
geom_line(aes(x = ggplot2$data[,1], y = ggplot2$data[,2]))
)
}
combine_plots(plot1, plot2)
sensor3 <- new("redoxSensor", e0 = -255, Rmin = 1, Rmax = 3, delta = 1)
plot3 <- plotE_deriv(sensor3)
combine_plots(plot1, plot3)
# Define the derivative of OxD
D_OXD <- function(R, Rmin, Rmax, delta) {
return (
(delta * (Rmax - Rmin)) /
((R * (delta - 1) - (delta * Rmax) + Rmin)^2)
)
}
# Define the fraction oxidized
OXD <- function(R, Rmin, Rmax, delta) {
return (
(R - Rmin)/((R - Rmin) + (delta*(Rmax - R)))
)
}
# Define the redox potential
E <- function(e0, R, Rmin, Rmax, delta) {
return(e0 - 12.71 * log((delta*Rmax - delta*R)/(R-Rmin)))
}
# Define the derivative of OxD
D_OXD <- function(R, Rmin, Rmax, delta) {
return (
(delta * (Rmax - Rmin)) /
((R * (delta - 1) - (delta * Rmax) + Rmin)^2)
)
}
# Define the colors we want to use
colorPal <- coolwarm(9)
colors <- colorPal[c(5, 4, 3, 2, 1, 6, 7, 8, 9, 1)]
# Define the deltas we want to use
deltas <- c(1, 2, 4, 16, 64, 0.5, 0.25, 0.0625, 0.015625, 0.171)
# Define the Rmin and Rmax we want to use
Rmin <- 1
Rmax <- 5
# Generate values of R
R <- seq(Rmin, Rmax, by = 0.001)
# Setup plot frame
par(pty = 's', mfrow = c(1,2), mai = c(0.2, 0.9, 0.2, 1.0))
# Plot OxD---------------------
# Generate values of OxD
OXD_values <- OXD(R, Rmin, Rmax, deltas[1])
# Plot the inital OXD values
plot(OXD_values ~ R, type = "l", ylab = "OxD", col = colors[1], bty ="L", main = "Map R to OxD", cex.axis = cex.axis, cex.lab = cex.lab)
# Plot the OXD values with different deltas
for (i in 2:length(deltas)) {
OXD_values <- OXD(R, Rmin, Rmax, deltas[i])
points(OXD_values ~ R, type = "l", col = colors[i])
}
legend("topright", inset = c(-0.25, 0), title = expression(delta['470']), as.character(format(deltas[c(4, 3, 2, 1, 5, 6, 7)], digits = 3)), pch = 19, col = colors[c(4, 3, 2, 1, 5, 6, 7)], xpd = TRUE)
# Plot dOxD----------------------
# Generate values of OxD
D_OXD_values <- D_OXD(R, Rmin, Rmax, deltas[1])
# Plot the inital OXD values
plot(D_OXD_values ~ R, type = "l", ylab = "dOxD", col = colors[1], bty ="L", main = "Map R to dOxD", cex.axis = cex.axis, cex.lab = cex.lab)
# Plot the OXD values with different deltas
for (i in 2:length(deltas)) {
D_OXD_values <- D_OXD(R, Rmin, Rmax, deltas[i])
points(D_OXD_values ~ R, type = "l", col = colors[i])
}
# Plot E---------------------
# Generate the values of E
E_values <- E(-270, R, Rmin, Rmax, deltas[1])
# Plot the inital E values
plot(E_values ~ R, type = "l", ylab = "E (mV)", col = colors[1], bty ="L", main = "Map R to E", cex.axis = cex.axis, cex.lab = cex.lab)
# Plot the E values with different deltas
for (i in 2:length(deltas)) {
E_values <- E(-270, R, Rmin, Rmax, deltas[i])
points(E_values ~ R, type = "l", col = colors[i])
}
1/16
1/1.5
1/2
1/2.5
1/3
setwd("C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/Final Report/Sensor Comparison")
setwd("C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/Final Report/Sensor Comparison")
knitr::opts_chunk$set(echo = FALSE)
