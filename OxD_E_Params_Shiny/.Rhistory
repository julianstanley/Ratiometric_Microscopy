ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
#dev.off()
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
#jpeg("plot1.jpg")
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 1.5, 2.0)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's')
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
#dev.off()
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
#jpeg("plot1.jpg")
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's')
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
#dev.off()
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(png,'plot1.png', dpi = 100)
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(png,'plot1.png', dpi = 100)
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(png,'plot1.png')
dev.off()
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(pdf,'plot1.pdf')
dev.off()
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.print(png,'plot1.png')
dev.print(png,'plot1.png')
dev.print(pdf,'plot1.pdf')
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(png,'plot1.png', res = 100)
dev.copy(pdf,'plot1.pdf')
dev.off()
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
invisible(dev.copy(pdf,'plot1.pdf'), compress = FALSE)
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
invisible(dev.copy(pdf,'plot1.pdf'))
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
invisible(dev.copy(pdf,'plot1.pdf'))
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(pdf,'plot1.pdf', compress = FALSE)
knitr::opts_chunk$set(echo = TRUE)
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
require(RColorBrewer)
colors <- brewer.pal(n = 8, 'Dark2')
maxRed <- 0.667
maxOx <- 5.207
delta_values <- c(0.171, 0.5, 1.0, 2.0, 5.84)
x <- seq(maxRed, maxOx, by = 0.001)
magX <- length(x)
yOx = FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[1], each = magX))
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(x, yOx,
type = 'l', main = "
Fraction of molecules oxidized at intensity",
ylab = expression('OxD'['roGFP']), xlab = expression('R'['410/470']),
col = colors[1])
for (i in 2:length(delta_values)) {
yOx_i <- FOx(x, rep(maxRed, each = magX),
rep(maxOx, each = magX),
rep(delta_values[i], each = magX))
points(x, yOx_i, col = colors[i], type = 'l')
}
options(digits = 4)
legend("topright", title = expression(delta['470']), inset=c(-0.35,0), xpd=TRUE, as.character(format(delta_values, nsmall = 3)), pch = rep(19, each = 6), col = colors[1:6])
dev.copy(pdf,'plot1.pdf')
FOx <- function(I, RR, ROX, delta) {
return (
(I - RR)/((I - RR) + (delta*(ROX - I)))
)
}
# Define the Nernst function
FE <- function(e0, I, RR, ROX, delta) {
return(e0 - 12.71 * log((1-FOx(I, RR, ROX, delta))/FOx(I, RR, ROX, delta)))
}
brewer.pal(n = 16, "Dark2")
shiny::runApp('C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/OxD_E_Params_Shiny')
setwd("C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/OxD_E_Params_LaTeX/Walkthrough")
knitr::opts_chunk$set(echo = TRUE)
# Define the Nernst function in terms of oxD
E_OXD <- function(e0, oxD) {
return(e0 - 12.71 * log((1-oxD)/oxD))
}
# Generate oxD values between 0 and 1
oxD <- seq(0, 1, by = 0.001)
magOXD <- length(oxD)
# Generate values of E
# Assume: E0 = -265
E = E_OXD(rep(-265, each = magOXD), oxD)
# Set margins and plot
par(mar=c(5, 5, 5, 8), pty = 's', bg = NA)
plot(oxD, E,
type = 'l', main = "
oxD versus E",
ylab = expression('E'['roGFP']), xlab = expression('OxD'['roGFP']))
# Define the Nernst function in terms of oxD
E_OXD <- function(e0, oxD) {
return(e0 - 12.71 * log((1-oxD)/oxD))
}
# Generate oxD values between 0 and 1
oxD <- seq(0, 1, by = 0.001)
magOXD <- length(oxD)
# Generate values of E
# Assume: E0 = -265
E = E_OXD(rep(-265, each = magOXD), oxD)
# Set margins and plot
plot(oxD, E, type = 'l', main = "oxD versus E",
ylab = expression('E'['roGFP']), xlab = expression('OxD'['roGFP']))
# Define the Nernst function in terms of oxD
E_OXD <- function(e0, oxD) {
return(e0 - 12.71 * log((1-oxD)/oxD))
}
# Generate oxD values between 0 and 1
oxD <- seq(0, 1, by = 0.001)
magOXD <- length(oxD)
# Generate values of E
# Assume: E0 = -265
E = E_OXD(rep(-265, each = magOXD), oxD)
# Set shape and plot
par(pty = 's')
plot(oxD, E, type = 'l', main = "Cell potential as a \n function of fraction oxidized",
ylab = expression('E'['roGFP']), xlab = expression('OxD'['roGFP']))
# Define the Nernst function in terms of oxD
E_OXD <- function(e0, oxD) {
return(e0 - 12.71 * log((1-oxD)/oxD))
}
# Generate oxD values between 0 and 1
oxD <- seq(0, 1, by = 0.001)
magOXD <- length(oxD)
# Generate values of E
# Assume: E0 = -265
E = E_OXD(rep(-265, each = magOXD), oxD)
# Set shape and plot
par(pty = 's')
plot(oxD, E, type = 'l', main = "Cell potential as a \n function of fraction oxidized",
ylab = expression('E'['roGFP']), xlab = expression('OxD'['roGFP']))
# Define the Nernst function in terms of oxD
E_OXD <- function(e0, oxD) {
return(e0 - 12.71 * log((1-oxD)/oxD))
}
# Generate oxD values between 0 and 1
oxD <- seq(0, 1, by = 0.001)
magOXD <- length(oxD)
# Generate values of E
# Assume: E0 = -265
E = E_OXD(rep(-265, each = magOXD), oxD)
# Set shape and plot
par(pty = 's')
plot(oxD, E, type = 'l', main = "Cell potential as a \n function of fraction oxidized",
ylab = expression('E'['roGFP']), xlab = expression('OxD'['roGFP']))
runApp('C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/OxD_E_Params_Shiny')
library(rsconnect)
deployApp()
setwd("C:/Users/Julian/Desktop/2018 Ubuntu Shared/GitShared/Ratiometric_Microscopy/OxD_E_Params_Shiny")
deployApp()
digamma(2)
